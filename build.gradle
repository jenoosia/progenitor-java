/*
 * This project will be using Gradle as its dependency management and build/deploy tool.
 */

/*
 * Gradle Plugins 
 */

apply plugin: "java"
apply plugin: "eclipse-wtp"
apply plugin: "war"

/*
 * General Configuration
 */

sourceCompatibility = 1.7
version = "1.0"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

/*
 * Dependency Management
 */

dependencies {
    
    /*
     * Libraries which aren't included in Gradle due to no Maven repository:
     * - cron4j-2.2.5.jar (cron-based scheduled jobs)
     * - sqljdbc4.jar (jdbc connector for SQL Server)
     */
    
    /* Don't include in WAR deployment. Required to compile, though. */
    
    providedCompile "javax.servlet:javax.servlet-api:3.1.0"
    
    /* For test builds */
    
    //Unit testing
    testCompile "junit:junit:4.11"
    testCompile "org.springframework:spring-test:3.2.1.RELEASE"
    
    /* MVC framework */
    
    //Struts2
    compile "org.apache.struts:struts2-core:2.3.15.1"
    compile "org.apache.struts:struts2-convention-plugin:2.3.15.1"
    compile "org.apache.struts:struts2-json-plugin:2.3.15.1"
    compile "org.apache.struts:struts2-spring-plugin:2.3.15.1"
    
    /* ORM */
    
    //Hibernate 3
    compile "org.hibernate:hibernate-core:3.6.10.Final"
    compile "org.hibernate:hibernate-entitymanager:3.6.10.Final"
    compile "org.hibernate:hibernate-c3p0:3.6.10.Final"
    
    //Hibernate Tools 
    compile "org.hibernate:hibernate-tools:3.6.0.CR1"
    
    //Generic Dao framework
    //compile "com.googlecode.genericdao:dao-hibernate:1.2.0-SNAPSHOT"
    compile "com.googlecode.genericdao:dao-hibernate:1.1.0"
    
    /* IoC, DI, Txn management */
    
    //Spring (without MVC)
    compile "org.springframework:spring-core:3.2.1.RELEASE"
    compile "org.springframework:spring-aop:3.2.1.RELEASE"
    compile "org.springframework:spring-context:3.2.1.RELEASE"
    compile "org.springframework:spring-jdbc:3.2.1.RELEASE"
    compile "org.springframework:spring-orm:3.2.1.RELEASE"
    compile "org.springframework:spring-tx:3.2.1.RELEASE"
    compile "org.springframework:spring-web:3.2.1.RELEASE"
    
    /* Security */
    
    //Shiro - Security framework
    compile "org.apache.shiro:shiro-core:1.2.1"
    compile "org.apache.shiro:shiro-web:1.2.1"
    compile "org.apache.shiro:shiro-spring:1.2.1"
    compile "org.apache.shiro:shiro-aspectj:1.2.1"
    
    /* Utility libraries */
    
    //Commons libraries
    compile "commons-codec:commons-codec:1.7"
    compile "commons-collections:commons-collections:3.2.1"
    compile "commons-net:commons-net:3.2"
    compile "org.apache.commons:commons-lang3:3.1"
    
    //Gson
    compile "com.google.code.gson:gson:2.2.2"
    
    //Guava
    compile "com.google.guava:guava:14.0"
    
    //Jodatime
    compile "joda-time:joda-time:2.2"
    
    //Mail
    compile "javax.mail:mail:1.4.6"
    
    //Handlebars.java
    compile "com.github.jknack:handlebars:0.12.0"
    
    //Logging and metrics
    compile "ch.qos.logback:logback-classic:1.0.9"
    compile "com.yammer.metrics:metrics-core:2.2.0"
    
    //Axis 1.4
    compile "org.apache.axis:axis:1.4"
    
    /* PDF, XLS, Barcodes, and related */
    
    //iText (MPL version)
    compile "com.lowagie:itext:4.2.0"
    
    //Flying Saucer
    compile "org.xhtmlrenderer:flying-saucer-core:9.0.1"
    compile "org.xhtmlrenderer:flying-saucer-pdf:9.0.1"
    
    //poi
    compile "org.apache.poi:poi:3.5-beta3"
    
    //jXLS
    compile "net.sf.jxls:jxls-core:1.0.1"
    compile "net.sf.jxls:jxls-reader:1.0.1"
    
    //Barcode4j
    compile "net.sf.barcode4j:barcode4j:2.1"
    
    //Zxing (QR code)
    compile "com.google.zxing:core:2.1"
    compile "com.google.zxing:javase:2.1"
    
    /* Non-managed libraries */
    
    //Cron4J
    //JDBC for SQL Server
    compile fileTree(dir: "webapp/public/WEB-INF/lib", include: "*.jar")
}

/*
 * War Configuration
 */

webAppDirName = "webapp/public"

String warDestinationDir = "/Users/jensen/dev/temp"
String explodedWarDir = "/Users/jensen/dev/temp/exploded"

war {
    destinationDir file(warDestinationDir)
    doLast {
        ant.unzip(src: war.archivePath, dest: explodedWarDir + "/" + war.archiveName)
    }
}